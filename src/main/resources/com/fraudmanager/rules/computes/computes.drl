package com.fraudmanager.rules.computes;

import com.fraudmanager.flink.model.Measurment;
import ma.s2m.auth.ITransaction;
import com.fraudmanager.flink.utils.TimeConversion;
import org.apache.flink.streaming.api.windowing.time.Time;
import com.fraudmanager.flink.model.ExternalSystem;
import java.util.List;
import java.util.Arrays;
import java.time.Duration;
import java.time.LocalDate;
import com.fraudmanager.flink.utils.Utils;
import com.fraudmanager.flink.model.computation.MeasurmentRecord;
import com.fraudmanager.flink.model.computation.RecordHashMap;
import com.fraudmanager.flink.model.computation.Subject;
import ma.s2m.auth.Alert;
import ma.medtech.droolbuilder.messaging.IMessageSender;
import ma.medtech.droolbuilder.services.TypeConverter;

global TimeConversion timeConverter;
global ExternalSystem externalSystem;
global IMessageSender messageSender;
global TypeConverter typeConverter;

rule "(Rule Type COMPUTE) RULSET_SAMPLE"
no-loop true
lock-on-active true
salience 100
agenda-group "Card->10 seconds"
when
$measurment: Measurment($record: records.get("COUNT_OF_TRANSACTION_ALL"))
then
$record.setCount($record.getCount() + 1);
$measurment.getRecords().put("COUNT_OF_TRANSACTION_ALL", $record);;
$measurment.setDirty(true);

update($measurment);
end

rule "(Rule Type ALERT) RULE_SAMPLE_ALERT"
no-loop true

salience 200
agenda-group "Card->10 seconds"
when
$measurment: Measurment($record: records.get("COUNT_OF_TRANSACTION_ALL"), $record.count>10L)
then
messageSender.send("ALERTE SAMPLE",Alert.POSITIVE);
$measurment.setDirty(true);

update($measurment);
end


