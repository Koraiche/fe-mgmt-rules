package com.fraudmanager.rules.computes;

import com.fraudmanager.flink.model.Measurment;
import ma.s2m.auth.ITransaction;
import com.fraudmanager.flink.utils.TimeConversion;
import org.apache.flink.streaming.api.windowing.time.Time;
import com.fraudmanager.flink.model.ExternalSystem;
import java.util.List;
import java.util.Arrays;
import java.time.Duration;
import java.time.LocalDate;
import com.fraudmanager.flink.utils.Utils;
import com.fraudmanager.flink.model.computation.MeasurmentRecord;
import com.fraudmanager.flink.model.computation.RecordHashMap;
import com.fraudmanager.flink.model.computation.Subject;
import ma.s2m.auth.Alert;
import ma.medtech.droolbuilder.messaging.IMessageSender;
import ma.medtech.droolbuilder.services.TypeConverter;

global TimeConversion timeConverter;
global ExternalSystem externalSystem;
global IMessageSender messageSender;
global TypeConverter typeConverter;

rule "(Rule Type ALERT)  Incorrect PIN exeeced a thershold"
no-loop true

salience 200
agenda-group "Card->10 minutes"
when
$measurment: Measurment()
then
messageSender.send("Alerte : Nombre de transactions refusées (PIN incorrect) dépasse 2L en moins de 10 minute(s)",Alert.POSITIVE);
$measurment.setDirty(true);

update($measurment);
end

rule "(Rule Type ALERT)  identify Card testing attacks (multiple small transactions in small time)"
no-loop true

salience 200
agenda-group "Card->2 minutes"
when
$measurment: Measurment($record: records.get("COUNT_OF_TRANSACTION_ALL_CARD_TESTING"), $record.count>3L)
then
messageSender.send("Alerte : Plus de 3L transactions détectées en moins de 2 minute(s)",Alert.POSITIVE);
$measurment.setDirty(true);

update($measurment);
end

rule "(Rule Type ALERT) rapid change of merchant"
no-loop true

salience 200
agenda-group "Merchant->2 minutes"
when
$measurment: Measurment($record: records.get("COUNT_OF_MCC_ALL_MERCHANT_CHANGE_IN_TIMEFRAME"))
then
$record.getCount()>=2L$measurment.setDirty(true);

update($measurment);
end

rule "(Rule Type COMPUTE)  Incorrect PIN exeeced a thershold"
no-loop true
lock-on-active true
salience 1000
agenda-group "Card->10 minutes"
when
$measurment: Measurment()
then
rule "(Rule Type COMPUTE)  identify Card testing attacks (multiple small transactions in small time)"
no-loop true
lock-on-active true
salience 1000
agenda-group "Card->2 minutes"
when
$measurment: Measurment($record: records.get("COUNT_OF_TRANSACTION_ALL_CARD_TESTING"))
then
$record.setCount($record.getCount() + 1);
$measurment.getRecords().put("COUNT_OF_TRANSACTION_ALL_CARD_TESTING", $record);;
$measurment.setDirty(true);

update($measurment);
end

rule "(Rule Type ALERT) Pays différents détectés en 1h"
no-loop true

salience 200
agenda-group "Card->1 hour"
when
$measurment: Measurment($record: records.get("COUNT_OF_COUNTRY_ALL_CHANGE_COUNTRIES_IN_TIMEFRAME"), $record.count>=2L)
then
messageSender.send("Alerte : Plus de 2L pays différents détectés en moins de 1 hour(s)",Alert.POSITIVE);
$measurment.setDirty(true);

update($measurment);
end

rule "(Rule Type COMPUTE) Pays différents détectés en 1h"
no-loop true
lock-on-active true
salience 1000
agenda-group "Card->1 hour"
when
$measurment: Measurment($lastCountry: lasts.get("COUNTRY"), $record: records.get("COUNT_OF_COUNTRY_ALL_CHANGE_COUNTRIES_IN_TIMEFRAME"), $lastCountry!=transaction.country)
then
$record.setCount($record.getCount() + 1);
$measurment.getRecords().put("COUNT_OF_COUNTRY_ALL_CHANGE_COUNTRIES_IN_TIMEFRAME", $record);;
$measurment.getLasts().put("COUNTRY",$measurment.getTransaction().getCountry());
$measurment.setDirty(true);

update($measurment);
end

rule "(Rule Type COMPUTE) Initialize rule -> Pays différents détectés en 1h"
no-loop true
lock-on-active true
salience 1000
when
    $measurment: Measurment()
        Measurment($lastCountry: lasts.get("COUNTRY"), $lastCountry==null)
then
$measurment.getLasts().put("COUNTRY",$measurment.getTransaction().getCountry());
$measurment.setDirty(true);
update($measurment);
end

rule "(Rule Type COMPUTE) rapid change of merchant"
no-loop true
lock-on-active true
salience 1000
agenda-group "Merchant->3 minutes"
when
$measurment: Measurment($record: records.get("COUNT_OF_MCC_ALL_MERCHANT_CHANGE_IN_TIMEFRAME"))
then
$record.setCount($record.getCount() + 1);
$measurment.getRecords().put("COUNT_OF_MCC_ALL_MERCHANT_CHANGE_IN_TIMEFRAME", $record);;
$record.getArgList().add($measurment.getTransaction().getMerchant());
$measurment.setDirty(true);

update($measurment);
end

rule "(Rule Type COMPUTE) Alert when high activity is detected at one merchant"
no-loop true
lock-on-active true
salience 1000
agenda-group "Card->15 minutes"
when
$measurment: Measurment($merchant: transaction.merchant)
    
    eval($merchant != null)
    $key0: String() from "COUNT".concat("_OF").concat("_TRANSACTION").concat("_ALL").concat("_BY").concat("_MERCHANT").concat("_IN").concat("_TIMEFRAME").concat("_").concat($merchant.toString())
    $record: MeasurmentRecord() from $measurment.getRecords().get($key0)
    Measurment(BYMERCHANTINTIMEFRAME)
then
$record.setCount($record.getCount() + 1);
$measurment.getRecords().put("COUNT_OF_TRANSACTION_ALL_BY_MERCHANT_IN_TIMEFRAME_" + $merchant, $record);;
$measurment.setDirty(true);

update($measurment);
end

rule "(Rule Type ALERT) Alert when high activity is detected at one merchant"
no-loop true

salience 200
agenda-group "Card->15 minutes"
when
$measurment: Measurment($merchant: transaction.merchant)
    
    eval($merchant != null)
    $key0: String() from "COUNT".concat("_OF").concat("_TRANSACTION").concat("_ALL").concat("_BY").concat("_MERCHANT").concat("_IN").concat("_TIMEFRAME").concat("_").concat($merchant.toString())
    $record: MeasurmentRecord() from $measurment.getRecords().get($key0)
    Measurment(BYMERCHANTINTIMEFRAME$record.count>=2L)
then
messageSender.send("Alerte : Plus de 2L transactions détectées sur un même marchand \" + $merchant + \" en moins de 15 minute(s)",Alert.POSITIVE);
$measurment.setDirty(true);

update($measurment);
end


